For this demonstration, I've got Kali Linux running on the upper portion of the screen, where most of the penetration testing activity will be conducted.

The target metasploitable VM is running down at the bottom left corner of the screen, but i'm mostly using it display text about this video. 

I've also got wireshark in the middle-bottom portion of the screen to display network traffic as we work through different phases of this demonstration.

---

For this project, I will be demonstrating how to perform

Reconnaisance (active)
Vulnerability Analysis
Credential Theft
Vulnerability Exploitation
Privelege Escalation
And Exfiltration of data

I will be using Kali, Nmap, and the Metasploitable Framework to perform these actions.
----

OK, let's get into it. 

The first thing we want to do is create a folder as a starting point to launch metasploit. 
If we download or collect anything while using metasploit, we want to know where it's going. 
So, here, i'm creating and jumping into a folder named Project 2. 

----

Next, I wanna make sure the postgresql service is running. This is a key component of the metasploit framework and enhances the capabilities of the framework by allowing it to automatically collect and save important information. 

-- 
Once the service has started, we need to initialize the metasploit database. This step will automatically create postgreSQL credentials, schema, and connect our metasploit instance to the database. 

And once that's done, we're finally ready to start up the metasploit console. 
---  

With a database-enabled metasploit, we have access to additional commands and features like hosts, services, creds, and vulns. These datasets automatically populate when specific events occur as we perform actions within metasploit.

-----

Now that we're set up and ready to go, let's first ping the target machine while observing network traffic. Wireshark is running with a filter so only traffic between the attacker and target machines will be displayed, (normal network traffic usually has a lot more activity). We see ICMP traffic while our attacker machine is pinging the target machine, confirming that we're able to connect to the target machine. 

---

Next, we're going to use db_nmap. It's a version of nmap designed to interface within metasploit and is only available if the database is connected. We're going to run a fast scan. 
----

after nmap finishes, we can take a look at the hosts table and we should be able to see that it automatically populated with the target machine information. 

services table and see what nmap found. 

for the purposes of this demonstration, I'm going to focus on Port 5432 which is the standard port for the postgresql service.


--- 

nmap also has the capability to run scripts. In this case, I'm going to try using the pgsql-brute.nse and see if we can capture any credentials by brute-force. While the nmap script is running, observe how much network traffic is happening to get a sense of how visible these types of attacks can be. There are several hundred of these scripts in the /etc/share/nmap/scripts folder, for additional research. 

--

I'm double-checking the version of the PostgreSQL installed on the target machine so I can search for possible applicable exploits. 

-- 

I've found one exploit that appears compatible with target Operating system so I'm going to try to use it against the target machine. I'm going to use the module, inspect available information and set options as applicable. 

--- 

Ok. Let's run the exploit and see if we're able to establish a shell session. 

---

Success. We got a meterpreter prompt. Let's see if we can navigate the file system and look for the information that we need. We should retrieve a hashed password and the /etc/passwd and /etc/shadow files. 

---

Ok, I found the files that I need for now, so I'm going to use the download command from the meterpreter line and grab the files from the target machine. This is why it was important to create a folder at the very beginning of the pentest. 


--- 

Seems I'm having a slight problem. I was able to download the mypass.txt file and the etc/passwd, but I'm getting an error when I'm trying to view the etc/shadow file. Most likely, this is because I dont have root privileges. Let's drop down into a shell and double-check. 

yeah, by using the whoami and id command, I can see that I definitely dont have root access. 

It's time to try and find a way to escalate privilege.

--- 

I'm going to use the same exploit module, but this time, I'm going to try and execute the exploit with a linux meterpreter reverse_tcp payload and have it run as a background job session. 

-- 

here, i'm using the -j -z flags to run the exploit as a background job session. 

-- 

Seems like the session was successfully established with a session ID number 2. Next, I'm gonna switch over to another exploit module that will make use of the session I just created. 

--

we can also use the sessions command to get more information about any active sessions we currently have. 

I'm gonna go ahead and set the session number for the netlink exploit and run it. If successful, we should be able to escalate privileges on the target system and gain root shell. 

---

Seems something went wrong. Somehow I'm binding to the loopback address as LHOST. This shouldnt be the case. 

When I show options one more time, I'm now able to set LHOST. This may be a bug of some sort, but it's a small obstacle and I can just rerun the exploit again while making sure LHOST is set to my attacker machine IP address. 


---

Ok. 2nd time seems to have worked. I've got the meterpreter prompt once again just like before, but this time I can see the contents of the etc/shadow file. And if we drop into a shell, we can confirm that I have full root access on the target machine. 

---

let's quickly back out into the msfconsole prompt and run the vulns command. We should be able to see that the vulns table has been populated with the two exploits we used on the target machine. This information may be useful if we need to repeat any actions again later. 


-- 

Alright. Let's kill any active sessions we have, get back to the terminal prompt and evaluate our loot. 

---

If we cat the mypass.txt file, we see the content is a base64 encoded string, which can be easily decoded. 

---

Next, we're going to quickly grab the hashed password for redteam2student2 and use John the ripper to try and decrypt the password. 






